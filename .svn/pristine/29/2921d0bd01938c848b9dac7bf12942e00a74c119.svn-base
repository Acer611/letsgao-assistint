package com.umessage.letsgo.assistant.config;

import org.apache.catalina.connector.Connector;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.apache.coyote.http11.Http11NioProtocol;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.core.io.ClassPathResource;

import java.io.File;

/**
 * Created by gaofei on 2016/12/21.
 */
@ConfigurationProperties(prefix = "custom.tomcat.https")
public class TomcatHttpsProperties {

    private int port;
    private boolean secure;
    private String scheme;
    private boolean ssl;
    private File keystore;
    private String keystorePassword;

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public String getScheme() {
        return scheme;
    }

    public void setScheme(String scheme) {
        this.scheme = scheme;
    }

    public boolean isSecure() {
        return secure;
    }

    public void setSecure(boolean secure) {
        this.secure = secure;
    }

    public boolean isSsl() {
        return ssl;
    }

    public void setSsl(boolean ssl) {
        this.ssl = ssl;
    }

    public File getKeystore() {
        return keystore;
    }

    public void setKeystore(File keystore) {
        this.keystore = keystore;
    }

    public String getKeystorePassword() {
        return keystorePassword;
    }

    public void setKeystorePassword(String keystorePassword) {
        this.keystorePassword = keystorePassword;
    }


    public void configureConnector(Connector connector) {

        Http11NioProtocol protocol = (Http11NioProtocol) connector.getProtocolHandler();
        try{
            //connector.setPort(port);
            connector.setSecure(secure);
            connector.setScheme(scheme);
            protocol.setSSLEnabled(ssl);
            File keystoreFile ;
            keystoreFile =  new ClassPathResource(".keystore").getFile();
            protocol.setKeystoreFile( keystoreFile.getAbsolutePath());
            protocol.setKeystorePass(keystorePassword);
            connector.setProperty("SSLEnabled", String.valueOf(ssl));
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /**
     * wechat mp properties
     *
     * @author Binary Wang
     */
    @ConfigurationProperties(prefix = "wechat.mp")
    public static class WeChatMpProperties {
        /**
         * 设置微信公众号的appid
         */
        private String appId;

        /**
         * 设置微信公众号的app secret
         */
        private String secret;

        /**
         * 微信支付partner id
         */
        private String partnerId;

        /**
         * 微信支付partner key
         */
        private String partnerKey;

        /**
         * 设置微信公众号的token
         */
        private String token;

        /**
         * 设置微信公众号的EncodingAESKey
         */
        private String aesKey;

        public String getAppId() {
            return this.appId;
        }

        public void setAppId(String appId) {
            this.appId = appId;
        }

        public String getSecret() {
            return this.secret;
        }

        public void setSecret(String secret) {
            this.secret = secret;
        }

        public String getPartnerId() {
            return this.partnerId;
        }

        public void setPartnerId(String partnerId) {
            this.partnerId = partnerId;
        }

        public String getPartnerKey() {
            return this.partnerKey;
        }

        public void setPartnerKey(String partnerKey) {
            this.partnerKey = partnerKey;
        }

        public String getToken() {
            return this.token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public String getAesKey() {
            return this.aesKey;
        }

        public void setAesKey(String aesKey) {
            this.aesKey = aesKey;
        }

        @Override
        public String toString() {
            return ToStringBuilder.reflectionToString(this,
                ToStringStyle.MULTI_LINE_STYLE);
        }
    }
}
