/*
package com.umessage.letsgo.assistant.common.utils;


import com.sun.imageio.plugins.jpeg.JPEGImageWriter;

import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageTypeSpecifier;
import javax.imageio.metadata.IIOMetadata;
import javax.imageio.plugins.jpeg.JPEGImageWriteParam;
import javax.imageio.stream.ImageOutputStream;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

*/
/**
 * Created by ZhaoYidong on 2017/1/4.
 *//*

public class NewImageUtils {

    */
/**
     * @Title: 构造图片
     * @Description: 生成水印并返回java.awt.image.BufferedImage
     * @param file
     *            源文件(图片)
     * @param waterFile
     *            水印文件(图片)
     * @param x
     *            距离右下角的X偏移量
     * @param y
     *            距离右下角的Y偏移量
     * @param alpha
     *            透明度, 选择值从0.0~1.0: 完全透明~完全不透明
     * @return BufferedImage
     * @throws IOException
     *//*

     public static BufferedImage watermark(File file, File waterFile, int x, int y, float alpha) throws IOException {
        // 获取底图
        BufferedImage buffImg = ImageIO.read(file);
        // 获取层图
        BufferedImage waterImg = ImageIO.read(waterFile);
        // 创建Graphics2D对象，用在底图对象上绘图
        Graphics2D g2d = buffImg.createGraphics();
        int waterImgWidth = waterImg.getWidth();// 获取层图的宽度
        int waterImgHeight = waterImg.getHeight();// 获取层图的高度
        // 在图形和图像中实现混合和透明效果
        g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, alpha));
        // 绘制
        g2d.drawImage(waterImg, x, y, waterImgWidth, waterImgHeight, null);
        g2d.dispose();// 释放图形上下文使用的系统资源
        return buffImg;
    }

    */
/**
      * 输出水印图片
      *
      * @param buffImg
     *            图像加水印之后的BufferedImage对象
      * @param savePath
      *            图像加水印之后的保存路径
     *//*

    public void generateWaterFile(BufferedImage buffImg, String savePath) {
        int temp = savePath.lastIndexOf(".") + 1;
        try {
             ImageIO.write(buffImg, savePath.substring(temp), new File(savePath));
         } catch (IOException e1) {
             e1.printStackTrace();
         }
    }



    */
/**
     * 待合并的两张图必须满足这样的前提，如果水平方向合并，则高度必须相等；如果是垂直方向合并，宽度必须相等。
     * mergeImage方法不做判断，自己判断。
     *
     * @param img1
     *            待合并的第一张图
     * @param img2
     *            带合并的第二张图
     * @return 返回合并后的BufferedImage对象
     * @throws IOException
     *//*

    private static BufferedImage mergeImage(BufferedImage img1, BufferedImage img2)
            throws IOException {
        int w1 = img1.getWidth();
        int h1 = img1.getHeight();
        int w2 = img2.getWidth();
        int h2 = img2.getHeight();
        // 从图片中读取RGB
        int[] ImageArrayOne = new int[w1 * h1];
        ImageArrayOne = img1.getRGB(0, 0, w1, h1, ImageArrayOne, 0, w1); // 逐行扫描图像中各个像素的RGB到数组中
        int[] ImageArrayTwo = new int[w2 * h2];
        ImageArrayTwo = img2.getRGB(0, 0, w2, h2, ImageArrayTwo, 0, w2);
        // 生成新图片
        BufferedImage DestImage = null;
        DestImage = new BufferedImage(w1,h1,BufferedImage.TYPE_INT_RGB);

        DestImage.setRGB(0, 0, w1, h1, ImageArrayOne, 0, w1); // 设置上半部分或左半部分的RGB
        // 加载水印图片文件
        Graphics2D resizedG = DestImage.createGraphics();
        resizedG.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,(float) 1));
        resizedG.drawImage(img2, w1 / 2 - w2 / 2, h1 / 2 - h2 / 2, null);
        resizedG.dispose();
        // 画图
        return DestImage;
    }


    */
/**
     * 打印文字水印图片
     *
     * @param pressText
     *            --文字
     * @param targetImg --
     *            目标图片
     * @param fontName --
     *            字体名
     * @param fontStyle --
     *            字体样式
     * @param color --
     *            字体颜色
     * @param fontSize --
     *            字体大小
     * @param x --
     *            偏移量
     * @param y
     *//*

    public static void pressText(String pressText, String targetImg,
                                 String fontName, int fontStyle, int color, int fontSize, int x,
                                 int y) {
        try {
            File _file = new File(targetImg);
            Image src = ImageIO.read(_file);
            int wideth = src.getWidth(null);
            int height = src.getHeight(null);
            BufferedImage image = new BufferedImage(wideth, height,
                    BufferedImage.TYPE_INT_RGB);
            Graphics g = image.createGraphics();
            g.drawImage(src, 0, 0, wideth, height, null);
            g.setColor(Color.white);
            g.setFont(new Font(fontName, fontStyle, fontSize));

            g.drawString(pressText, wideth - fontSize - x, height - fontSize
                    / 2 - y);
            g.dispose();
            FileOutputStream out = new FileOutputStream(targetImg);
            JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
            encoder.encode(image);
            out.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    */
/**
     * 外部调用方法
     * @param url
     * @param w
     * @param h
     *//*

    public static String ImgCompress(String url, String filePath, int w, int h) {
        // 压缩质量 百分比
        float JPEGcompression = 0.7f;

        // 本地图片存储路径
        //url = "/var" + url;
        String name = url.substring(url.lastIndexOf("/") + 1);


        //压缩主方法
        return ImgCompress(filePath, url, name, w, h, JPEGcompression);

    }

    */
/**
     * 图片压缩主方法
     *
     * @param filePath
     *            图片所在的文件夹路径
     * @param url
     *            图片路径
     * @param name
     *            图片名
     * @param w
     *            目标宽
     * @param h
     *            目标高
     * @param JPEGcompression
     *            压缩质量/百分比
     * @author zhouqz
     *//*

    public static String ImgCompress(String filePath, String url, String name,
                                     int w, int h, float JPEGcompression) {
        File file = new File(url);
        if (!(file.exists() && file.canRead())) {
            filePath = "/var/upload/404.jpg";
        }else{
            try {
                BufferedImage bufferedImage =  ImageIO.read(file);

                //注释掉的部分是将压缩后的图像调整为方形
//				int old_w = bufferedImage.getWidth(null); // 得到源图宽
//				int old_h = bufferedImage.getHeight(null);//得到源图高
//				int new_w = 0;
//				int new_h = 0;
//				double w2 = (old_w * 1.00) / (w * 1.00);
//				double h2 = (old_h * 1.00) / (h * 1.00);
//				// 图片跟据长宽留白，成一个正方形图。
//				BufferedImage oldpic;
//				if (old_w > old_h) {
//					oldpic = new BufferedImage(old_w, old_w,
//							BufferedImage.TYPE_INT_RGB);
//				} else {
//					if (old_w < old_h) {
//						oldpic = new BufferedImage(old_h, old_h,
//								BufferedImage.TYPE_INT_RGB);
//					} else {
//						oldpic = new BufferedImage(old_w, old_h,
//								BufferedImage.TYPE_INT_RGB);
//					}
//				}
//				Graphics2D g = oldpic.createGraphics();
//				g.setColor(Color.white);
//				if (old_w > old_h) {
//					g.fillRect(0, 0, old_w, old_w);
//					g.drawImage(src, 0, (old_w - old_h) / 2, old_w, old_h,
//							Color.white, null);
//				} else {
//					if (old_w < old_h) {
//						g.fillRect(0, 0, old_h, old_h);
//						g.drawImage(src, (old_h - old_w) / 2, 0, old_w, old_h,
//								Color.white, null);
//					} else {
//						// g.fillRect(0,0,old_h,old_h);
//						g.drawImage(src.getScaledInstance(old_w, old_h,
//								Image.SCALE_SMOOTH), 0, 0, null);
//					}
//				}
//				g.dispose();
//				src = oldpic;
                // 图片调整为方形结束
//				if (old_w > w)
//					new_w = (int) Math.round(old_w / w2);
//				else
//					new_w = old_w;
//				if (old_h > h)
//					new_h = (int) Math.round(old_h / h2);// 计算新图长宽
//				else
//					new_h = old_h;

                int new_w = w;
                int new_h = h;

                BufferedImage image_to_save = new BufferedImage(new_w, new_h,
                        bufferedImage.getType());
                image_to_save.getGraphics().drawImage(
                        bufferedImage.getScaledInstance(new_w, new_h, Image.SCALE_SMOOTH), 0,
                        0, null);
                FileOutputStream fos = new FileOutputStream(filePath); // 输出到文件流

                // 旧的使用 jpeg classes进行处理的方法
                // JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(fos);
                // JPEGEncodeParam jep =
                // JPEGCodec.getDefaultJPEGEncodeParam(image_to_save);
				*/
/* 压缩质量 *//*

                // jep.setQuality(per, true);
                // encoder.encode(image_to_save, jep);

                // 新的方法
                int dpi = 300;//分辨率
                saveAsJPEG(dpi, image_to_save, JPEGcompression, fos);
                //关闭输出流
                fos.close();
                //返回压缩后的图片地址
            } catch (IOException ex) {
                filePath = "/var/upload/404.jpg";
            }
        }

        return filePath;

    }

    */
/**
     * 以JPEG编码保存图片
     *
     * @param dpi
     *            分辨率
     * @param image_to_save
     *            要处理的图像图片
     * @param JPEGcompression
     *            压缩比
     * @param fos
     *            文件输出流
     * @throws IOException
     *//*

    public static void saveAsJPEG(Integer dpi, BufferedImage image_to_save,
                                  float JPEGcompression, FileOutputStream fos) throws IOException {

        // useful documentation at
        // http://docs.oracle.com/javase/7/docs/api/javax/imageio/metadata/doc-files/jpeg_metadata.html
        // useful example program at
        // http://johnbokma.com/java/obtaining-image-metadata.html to output
        // JPEG data

        // old jpeg class
        // com.sun.image.codec.jpeg.JPEGImageEncoder jpegEncoder =
        // com.sun.image.codec.jpeg.JPEGCodec.createJPEGEncoder(fos);
        // com.sun.image.codec.jpeg.JPEGEncodeParam jpegEncodeParam =
        // jpegEncoder.getDefaultJPEGEncodeParam(image_to_save);

        // Image writer
        JPEGImageWriter imageWriter = (JPEGImageWriter) ImageIO
                .getImageWritersBySuffix("jpg").next();
        ImageOutputStream ios = ImageIO.createImageOutputStream(fos);
        imageWriter.setOutput(ios);
        // and metadata
        IIOMetadata imageMetaData = imageWriter.getDefaultImageMetadata(
                new ImageTypeSpecifier(image_to_save), null);

        // if(dpi != null && !dpi.equals("")){
        //
        // //old metadata
        // //jpegEncodeParam.setDensityUnit(com.sun.image.codec.jpeg.JPEGEncodeParam.DENSITY_UNIT_DOTS_INCH);
        // //jpegEncodeParam.setXDensity(dpi);
        // //jpegEncodeParam.setYDensity(dpi);
        //
        // //new metadata
        // Element tree = (Element)
        // imageMetaData.getAsTree("javax_imageio_jpeg_image_1.0");
        // Element jfif =
        // (Element)tree.getElementsByTagName("app0JFIF").item(0);
        // jfif.setAttribute("Xdensity", Integer.toString(dpi) );
        // jfif.setAttribute("Ydensity", Integer.toString(dpi));
        //
        // }

        if (JPEGcompression >= 0 && JPEGcompression <= 1f) {

            // old compression
            // jpegEncodeParam.setQuality(JPEGcompression,false);

            // new Compression
            JPEGImageWriteParam jpegParams = (JPEGImageWriteParam) imageWriter
                    .getDefaultWriteParam();
            jpegParams.setCompressionMode(JPEGImageWriteParam.MODE_EXPLICIT);
            jpegParams.setCompressionQuality(JPEGcompression);

        }

        // old write and clean
        // jpegEncoder.encode(image_to_save, jpegEncodeParam);

        // new Write and clean up
        imageWriter.write(imageMetaData,
                new IIOImage(image_to_save, null, null), null);
        ios.close();
        imageWriter.dispose();

    }
}
*/
