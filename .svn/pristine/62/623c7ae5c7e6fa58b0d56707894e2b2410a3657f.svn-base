package com.umessage.letsgo.assistant.controller;

import com.github.pagehelper.Page;
import com.umessage.letsgo.assistant.common.exception.BusinessException;
import com.umessage.letsgo.assistant.common.helper.UserLoginHelper;
import com.umessage.letsgo.assistant.common.utils.HttpServletUtil;
import com.umessage.letsgo.assistant.model.po.WeChatOrderInfoEntity;
import com.umessage.letsgo.assistant.model.vo.response.OrderSellerOpenIdResponse;
import com.umessage.letsgo.assistant.service.IWeChatInfoService;
import com.umessage.letsgo.assistant.service.IWeChatOrderInfoService;
import com.umessage.letsgo.assistant.service.IWeChatSendMessageService;
import com.umessage.letsgo.assistant.wechat.security.WxUser;
import me.chanjar.weixin.common.bean.WxJsapiSignature;
import me.chanjar.weixin.common.exception.WxErrorException;
import me.chanjar.weixin.mp.api.WxMpService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by ZhaoYidong on 2016/12/15.
 */
@Controller
@RequestMapping("/wechat/orderinfo")
public class WeChatOrderInfoController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private IWeChatOrderInfoService wechatOrderInfoService;
    @Autowired
    private IWeChatSendMessageService weChatSendMessageService;
    @Autowired
    private WxMpService wxService;
    @Autowired
    private UserLoginHelper loginHelper;
    @Autowired
    private IWeChatInfoService weChatInfoService;




    /**
     * 根据id查询订单
     * @param id
     * @param model
     * @return
     */
    @RequestMapping("/select")
    public String select(Long id, Model model){
        WeChatOrderInfoEntity orderInfoEntity = wechatOrderInfoService.select(id);
        model.addAttribute("wechatOrderInfoEntities",orderInfoEntity);
        return "user/pay";
    }


    /**
     * 用户查看订单列表
     * @param model
     * @return
     */
    @RequestMapping("/selectByCustomerOpenid")
    public String selectByCustomerOpenid( HttpServletRequest request, Model model ) throws WxErrorException {
        logger.info("进入获取用户订单列表方法");
        WxUser wxUser = loginHelper.getWxUser();
        String customerOpenid = wxUser.getUsername();
        String pageNumber = request.getParameter("pageNumber");
        String pageSize = request.getParameter("pageSize");
        Page<WeChatOrderInfoEntity> orderList = wechatOrderInfoService.selectByCustomerOpenid(customerOpenid, pageNumber, pageSize);
       //处理用户端查看订单正在处理状态
        for (WeChatOrderInfoEntity weChatOrderInfoEntity:orderList){
            if(weChatOrderInfoEntity.getStatus()==1){
                weChatOrderInfoEntity.setStatus(2);
            }
        }
        Map resultMap = new HashMap<>();
        resultMap.put("orderList",orderList);
        resultMap.put("total",orderList.getTotal());
        resultMap.put("page",orderList.getPages());
        logger.info("获取用户订单列表完成");
        model.addAttribute("resultMap",resultMap);
        return "user/userorderlist";
    }

    @RequestMapping("/selectByCustomerOpenidPages")
    @ResponseBody
    public Map selectByCustomerOpenidPages( HttpServletRequest request, Model model ) throws WxErrorException {
        WxUser wxUser = loginHelper.getWxUser();
        String customerOpenid = wxUser.getUsername();
        String pageNumber = request.getParameter("pageNumber");
        String pageSize = request.getParameter("pageSize");
        Page<WeChatOrderInfoEntity> orderList = wechatOrderInfoService.selectByCustomerOpenid(customerOpenid, pageNumber, pageSize);
        Map resultMap = new HashMap<>();
        resultMap.put("orderList",orderList);
        resultMap.put("total",orderList.getTotal());
        resultMap.put("page",orderList.getPages());
        model.addAttribute("resultMap",resultMap);
        return resultMap;
    }

    /**
     * 下单用户查看待支付订单
     * @param model
     * @return
     */
    @RequestMapping("/selectByStatus")
    public String selectByStatus(HttpServletRequest request,Long id, Model model){
        logger.info("进入获取待支付订单详情页方法");
        //WxUser wxUser = loginHelper.getWxUser();
        //String customerOpenid = wxUser.getUsername();、
        logger.info("当前订单的id 为" + id);
        WeChatOrderInfoEntity wechatOrderInfoEntities = wechatOrderInfoService.selectByStatus(id);
        model.addAttribute("wechatOrderInfoEntities",wechatOrderInfoEntities);
        logger.info("获取订单信息完成");

        Map resultMap = null;
        if(wechatOrderInfoEntities.getStatus()==0){
            logger.info("获取支付信息和生成与支付payID");
            resultMap = wechatOrderInfoService.createPayInfo(id,wechatOrderInfoEntities);
            String packageInfo = resultMap.get("package").toString();

            logger.info("支付payID为：" + packageInfo);
            logger.info("timestamp为：" + resultMap.get("timeStamp"));
            logger.info("nonceStr为：" + resultMap.get("nonceStr"));
            logger.info("signType",resultMap.get("nonceStr") );
            String payid = packageInfo.substring(packageInfo.indexOf("=")+1,packageInfo.length());
            WeChatOrderInfoEntity wechatOrderInfoEntity = new WeChatOrderInfoEntity();
            wechatOrderInfoEntity.setId(id);
            wechatOrderInfoEntity.setPayId(payid);
            wechatOrderInfoEntity.setStatus(0);
            logger.info("........packageInfo,payid");
            logger.info("更新订单表中的支付状态和payId 字段");
            wechatOrderInfoService.update(wechatOrderInfoEntity);
        }

        WxJsapiSignature jsapiSignature = null;
        String url = HttpServletUtil.getCompleteUrl(request);
        logger.info("url:"+url);
        try {
            jsapiSignature = wxService.createJsapiSignature(url);
        } catch (WxErrorException e) {
            e.printStackTrace();
        }
        logger.info("appid:"+jsapiSignature.getAppid()+",noncestr:"+jsapiSignature.getNoncestr()
                +",timestamp:"+jsapiSignature.getTimestamp()+",signature:"+jsapiSignature.getSignature());

        model.addAttribute("jsapiSignature", jsapiSignature);
        model.addAttribute("payInfoMap",resultMap);

        return "user/pay";
    }

    /**
     * 更改支付状态
     * @param id
     * @return
     */
    @RequestMapping("/updateStatus")
    @ResponseBody
    public Map<String,Object> updateStatus(Long id) throws BusinessException {
        Map<String,Object> map = new HashMap<>();
        try {
            wechatOrderInfoService.updateStatus(id);
            map.put("result",0);
            map.put("message","更新状态成功");
        }catch (Exception e){
            System.out.println(e.getMessage());
            map.put("result",-1);
            map.put("message","更新状态失败");
        }
        return map;
    }

    /**
     * 推荐人查询订单收益
     * @param model
     * @return
     */
    @RequestMapping("/selectBySellerOpenid")
    public String selectBySellerOpenid( HttpServletRequest request,Model model){
        logger.info("进入导游查看收益方法");
        WxUser wxUser = loginHelper.getWxUser();
        String sellerOpenid = wxUser.getUsername();
        String pageNumber = request.getParameter("pageNumber");
        String pageSize = request.getParameter("pageSize");
        OrderSellerOpenIdResponse response = wechatOrderInfoService.selectBySellerOpenid(sellerOpenid, pageNumber, pageSize);
        Map sellerRewardMap = new HashMap<>();
        sellerRewardMap.put("orderList",response.getOrderList());
        sellerRewardMap.put("total",response.getTotal());
        sellerRewardMap.put("page",response.getPage());
        sellerRewardMap.put("totalReward",response.getTotalReward());
        logger.info("导游查看收益获取数据完成");
        model.addAttribute("resultMap",sellerRewardMap);
        return "guide/dlist";
    }


    /**
     * 推荐人查询订单收益分页方法
     * @param request
     * @param model
     * @return
     */
    @RequestMapping("/selectBySellerOpenidPages")
    @ResponseBody
    public Map selectBySellerOpenidPages( HttpServletRequest request,Model model){
        //TODO LoginUser user （获取当前登陆用户的openID）
        WxUser wxUser = loginHelper.getWxUser();
        String sellerOpenid = wxUser.getUsername();
        String pageNumber = request.getParameter("pageNumber");
        String pageSize = request.getParameter("pageSize");
        OrderSellerOpenIdResponse response = wechatOrderInfoService.selectBySellerOpenid(sellerOpenid, pageNumber, pageSize);
        Map sellerRewardMap = new HashMap<>();
        sellerRewardMap.put("orderList",response.getOrderList());
        sellerRewardMap.put("total",response.getTotal());
        sellerRewardMap.put("page",response.getPage());
        sellerRewardMap.put("totalReward",response.getTotalReward());
        model.addAttribute("resultMap",sellerRewardMap);
        return sellerRewardMap;
    }






}
