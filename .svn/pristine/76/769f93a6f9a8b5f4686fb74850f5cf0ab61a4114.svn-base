package com.umessage.letsgo.assistant.controller;

import com.umessage.letsgo.assistant.model.WechatOrderInfoEntity;
import com.umessage.letsgo.assistant.service.IWeChatInfoService;
import com.umessage.letsgo.assistant.service.IWechatOrderInfoService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by ZhaoYidong on 2016/12/15.
 */
@Controller
@RequestMapping("/orderinfo")
public class WechatOrderInfoController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private IWechatOrderInfoService wechatOrderInfoService;
    @Autowired
    private IWeChatInfoService weChatInfoService;

    /**
     * 生成订单
     * @param
     * @return
     */
    @RequestMapping("/insert")
    @ResponseBody
    public Map<String,Object> insert(WechatOrderInfoEntity orderInfoEntity){
        Map<String,Object> map = new HashMap<>();
        //TODO LoginUser user （获取当前登陆用户的openID）
        //String openId = user.getOpenID()
       // WeChatInfoEntity weChatInfoEntity =  weChatInfoService.findWecahtUserByOpenID(openId);
        //orderInfoEntity.setCustomerOpenid(customerOpenID);
        //orderInfoEntity.setSellerOpenid();
        try {
            wechatOrderInfoService.insert(orderInfoEntity);
            map.put("result",0);
            map.put("message","添加成功");
        }catch (Exception e){
            System.out.println(e.getMessage());
            map.put("result",-1);
            map.put("message","添加失败");
        }
        return map;
    }

    /**
     * 根据id查询订单
     * @param id
     * @param model
     * @return
     */
    @RequestMapping("/select")
    public String select(Long id, Model model){
        WechatOrderInfoEntity orderInfoEntity = wechatOrderInfoService.select(id);
        model.addAttribute("orderInfoEntity",orderInfoEntity);
        return "hello";
    }

    /**
     * 更新订单
     * @param
     * @return
     */
    @RequestMapping("/update")
    @ResponseBody
    public Map<String,Object> update(WechatOrderInfoEntity orderInfoEntity){
        Map<String,Object> map = new HashMap<>();
        try {
            wechatOrderInfoService.update(orderInfoEntity);
            map.put("result",0);
            map.put("message","更新成功");
        }catch (Exception e){
            System.out.println(e.getMessage());
            map.put("result",-1);
            map.put("message","更新失败");
        }
        return map;
    }

    /**
     * 取消订单
     * @param id
     * @return
     */
    @RequestMapping("/delete")
    @ResponseBody
    public String delete(Long id){
        Map<String,Object> map = new HashMap<>();
        try {
            wechatOrderInfoService.delete(id);
            map.put("result",0);
            map.put("message","删除成功");
        }catch (Exception e){
            System.out.println(e.getMessage());
            map.put("result",-1);
            map.put("message","删除失败");
        }
        return "hello";
    }

    /**
     * 用户查看订单列表
     * @param customerOpenid
     * @param model
     * @return
     */
    @RequestMapping("/selectByCustomerOpenid")
    public String selectByCustomerOpenid( HttpServletRequest request,String customerOpenid, Model model ){
       //助手端调用闯入flag:1参数
        String flag = request.getParameter("flag");
        //TODO LoginUser user （获取当前登陆用户的openID）
        //String openId = user.getOpenID()
        List<WechatOrderInfoEntity> wechatOrderInfoEntities = wechatOrderInfoService.selectByCustomerOpenid(customerOpenid,flag);
        model.addAttribute("wechatOrderInfoEntities",wechatOrderInfoEntities);
        return "hello";
    }

    /**
     * 下单用户查看待支付订单
     * @param customerOpenid
     * @param model
     * @return
     */
    @RequestMapping("/selectByStatus")
    public String selectByStatus(String customerOpenid, Model model){
        //TODO LoginUser user （获取当前登陆用户的openID）
        //String openId = user.getOpenID()
        List<WechatOrderInfoEntity> wechatOrderInfoEntities = wechatOrderInfoService.selectByStatus(customerOpenid);
        model.addAttribute("wechatOrderInfoEntities",wechatOrderInfoEntities);
        return "hello";
    }

    /**
     * 更改支付状态
     * @param id
     * @return
     */
    @RequestMapping("/updateStatus")
    @ResponseBody
    public Map<String,Object> updateStatus(Long id){
        Map<String,Object> map = new HashMap<>();
        try {
            wechatOrderInfoService.updateStatus(id);
            map.put("result",0);
            map.put("message","更新状态成功");
        }catch (Exception e){
            System.out.println(e.getMessage());
            map.put("result",-1);
            map.put("message","更新状态失败");
        }
        return map;
    }

    /**
     * 推荐人查询订单收益
     * @param sellerOpenid
     * @param model
     * @return
     */
    @RequestMapping("/selectBySellerOpenid")
    public String selectBySellerOpenid(String sellerOpenid,Model model){
        //TODO LoginUser user （获取当前登陆用户的openID）
        //String openId = user.getOpenID()
        List<WechatOrderInfoEntity> wechatOrderInfoEntities = wechatOrderInfoService.selectBySellerOpenid(sellerOpenid);
        wechatOrderInfoEntities = this.getSellerReward(wechatOrderInfoEntities);
        model.addAttribute("wechatOrderInfoEntities",wechatOrderInfoEntities);
        return "hello";
    }


    /**
     * 获取订单受益
     * @param wechatOrderInfoEntities
     * @return
     */
    public List<WechatOrderInfoEntity>  getSellerReward(List<WechatOrderInfoEntity> wechatOrderInfoEntities){
        for (WechatOrderInfoEntity wechatOrderInfoEntity:wechatOrderInfoEntities) {
            Double totalFee = wechatOrderInfoEntity.getTotalFee();
            Double realFee = wechatOrderInfoEntity.getRealFee();
            Double reward = wechatOrderInfoEntity.getReward();
            double reslutRe = 0.0;
            if (totalFee != null && realFee != null && reward != null){
                reslutRe = (totalFee - realFee) * reward;
            }
            wechatOrderInfoEntity.setSellerReward(reslutRe);
        }
        return wechatOrderInfoEntities;
    }


    /**
     * 获取订单列表（助手端）
     * @param request
     * @param model
     * @return
     */
    @RequestMapping("/getOrderList")
    public String  getOrderList(HttpServletRequest request, Model model){
        logger.info("进入助手端获取订单列表方法");
        String status = request.getParameter("status");
        String keyWords = request.getParameter("keyWords");
        String pageNumber = request.getParameter("pageNumber");
        WechatOrderInfoEntity wechatOrderInfoEntity = new WechatOrderInfoEntity();
        if(null != status && !"".equals(status)){
            wechatOrderInfoEntity.setStatus(Integer.parseInt(status));
        }
        if(null != keyWords && !"".equals(keyWords)){
            wechatOrderInfoEntity.setKeyWords(keyWords);
        }
        logger.info("要查询的订单状态和关键字分别是:" + status + " , " + keyWords);
        Map resultMap = wechatOrderInfoService.selectOrderList(wechatOrderInfoEntity,pageNumber);
        model.addAttribute("resultMap",resultMap);

        //TODO 助手端的订单列表页面
        return  "";
    }


}
